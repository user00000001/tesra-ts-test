import { CompilerOutput } from './compiler';
import { Client, CompileOptions, DeployOptions, InitClientOptions, InvokeOptions, IsDeployedOptions, TransferOptions } from './types';
export declare function initClient({ rpcAddress }: InitClientOptions): Client;
export declare function compile({ code, type, url }: CompileOptions): Promise<CompilerOutput>;
export declare function deploy({ client, account, password, ...rest }: DeployOptions): Promise<any>;
export declare function isDeployed({ client, scriptHash }: IsDeployedOptions): Promise<boolean>;
export declare function invoke({ client, account, password, signers, ...rest }: InvokeOptions): Promise<any>;
export declare function transfer({ client, account, password, ...rest }: TransferOptions): Promise<any>;
export declare function withdrawTsg({ client, account, password, ...rest }: TransferOptions): Promise<any>;
export { CompilerType, CompilerOutput } from './compiler';
export { loadContract, loadCompiledContract } from './common/utils';
export { loadWallet, createWallet, createAccount } from './wallet';
export { hex2num, reverseBuffer } from './common/utils';
export { RpcClient } from './network/rpcClient';
export { buildInvokePayload } from './invoker';
export { InvokeCode } from './core/payload/invokeCode';
export { DeployCode } from './core/payload/deployCode';
export { Transaction } from './core/transaction';
export { Signer } from './types';
