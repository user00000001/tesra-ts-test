{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/common/struct.ts","webpack:///./src/common/uint256.ts","webpack:///./src/common/utils.ts","webpack:///./src/compiler/csCompiler.ts","webpack:///./src/compiler/index.ts","webpack:///./src/compiler/pyCompiler.ts","webpack:///./src/compiler/types.ts","webpack:///./src/core/payload/deployCode.ts","webpack:///./src/core/payload/invokeCode.ts","webpack:///./src/core/transaction.ts","webpack:///./src/deployer.ts","webpack:///./src/index.ts","webpack:///./src/invoker.ts","webpack:///./src/network/rpcClient.ts","webpack:///./src/transactor.ts","webpack:///./src/wallet.ts","webpack:///external \"bignumber.js\"","webpack:///external \"cross-fetch\"","webpack:///external \"crypto\"","webpack:///external \"fs\"","webpack:///external \"long\"","webpack:///external \"ontology-ts-crypto\""],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;AClFM,MAAO,MAAP,CAAa;AAGjB,gBAAY,KAAZ,EAAwB;AACtB,aAAK,KAAL,GAAa,KAAb;AACD;AALgB,C;;;;;;;;;;;;;;;;ACAnB;AAEA,MAAM,eAAe,EAArB;AAEM,MAAO,OAAP,CAAc;AAClB,WAAO,cAAP,CAAsB,CAAtB,EAA+B;AAC7B,cAAM,IAAI,IAAI,yDAAJ,CAAW,CAAX,CAAV;AACA,cAAM,IAAI,IAAI,OAAJ,EAAV;AACA,UAAE,WAAF,CAAc,CAAd;AAEA,eAAO,CAAP;AACD;AAGD,cAAO;AACL,cAAM,KAAK,IAAI,yDAAJ,EAAX;AACA,aAAK,SAAL,CAAe,EAAf;AACA,eAAO,IAAI,MAAJ,CAAW,GAAG,QAAH,EAAX,CAAP;AACD;AAED,cAAU,CAAV,EAAmB;AACjB,UAAE,UAAF,CAAa,KAAK,KAAlB;AACD;AAED,gBAAY,CAAZ,EAAqB;AACnB,YAAI;AACF,iBAAK,KAAL,GAAa,EAAE,SAAF,CAAY,YAAZ,CAAb;AACD,SAFD,CAEE,OAAO,CAAP,EAAU;AACV,kBAAM,IAAI,KAAJ,CAAU,2BAAV,CAAN;AACD;AACF;AA1BiB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJpB;AACA;AACA;AACA;AAEM,SAAU,KAAV,CAAgB,EAAhB,EAA0B;AAC9B,WAAO,IAAI,OAAJ,CAAa,OAAD,IAAa,WAAW,OAAX,EAAoB,EAApB,CAAzB,CAAP;AACD;AAEK,SAAU,YAAV,CAAuB,IAAvB,EAAmC;AACvC,WAAO,wDAAa,IAAb,CAAP;AACD;AAEK,SAAU,oBAAV,CAA+B,IAA/B,EAA2C;AAC/C,UAAM,aAAa,wDAAa,IAAb,CAAnB;AACA,UAAM,aAAa,WAAW,QAAX,EAAnB;AACA,WAAO,IAAI,MAAJ,CAAW,UAAX,EAAuB,KAAvB,CAAP;AACD;AAEK,SAAU,eAAV,CAA0B,IAA1B,EAAsC;AAC1C,WAAO,wDAAa,IAAb,EAAmB,QAAnB,EAAP;AACD;AAEK,SAAU,aAAV,CAAwB,GAAxB,EAAmC;AACvC,UAAM,SAAS,OAAO,WAAP,CAAmB,IAAI,MAAvB,CAAf;AAEA,SAAK,IAAI,IAAI,CAAR,EAAW,IAAI,IAAI,MAAJ,GAAa,CAAjC,EAAoC,KAAK,CAAzC,EAA4C,EAAE,CAAF,EAAK,EAAE,CAAnD,EAAsD;AACpD,eAAO,CAAP,IAAY,IAAI,CAAJ,CAAZ;AACA,eAAO,CAAP,IAAY,IAAI,CAAJ,CAAZ;AACD;AAED,WAAO,MAAP;AACD;AAEK,SAAU,OAAV,CAAkB,GAAlB,EAA6B;AACjC,UAAM,SAAS,IAAI,MAAJ,CAAW,GAAX,EAAgB,KAAhB,CAAf;AACA,WAAO,6DAAU,eAAV,CAA0B,MAA1B,EAAkC,UAAlC,EAAP;AACD;AAEK,SAAU,SAAV,CAAoB,SAApB,EAAoC,OAApC,EAA2D;AAC/D,QAAI,OAAO,SAAP,KAAqB,SAAzB,EAAoC;AAClC,gBAAQ,QAAR,CAAiB,SAAjB;AACA,gBAAQ,WAAR,CAAoB,0DAAO,KAA3B;AACA,gBAAQ,WAAR,CAAoB,0DAAO,MAA3B;AACD,KAJD,MAIO,IAAI,OAAO,SAAP,KAAqB,QAAzB,EAAmC;AACxC,gBAAQ,OAAR,CAAgB,SAAhB;AACA,gBAAQ,WAAR,CAAoB,0DAAO,KAA3B;AACA,gBAAQ,WAAR,CAAoB,0DAAO,GAA3B;AACD,KAJM,MAIA,IAAI,qBAAqB,iCAAzB,EAA+B;AACpC,gBAAQ,OAAR,CAAgB,SAAhB;AACA,gBAAQ,WAAR,CAAoB,0DAAO,KAA3B;AACA,gBAAQ,WAAR,CAAoB,0DAAO,GAA3B;AACD,KAJM,MAIA,IAAI,OAAO,SAAP,KAAqB,QAAzB,EAAmC;AACxC,gBAAQ,SAAR,CAAkB,IAAI,MAAJ,CAAW,SAAX,CAAlB;AACD,KAFM,MAEA,IAAI,qBAAqB,MAAzB,EAAiC;AACtC,gBAAQ,SAAR,CAAkB,SAAlB;AACD,KAFM,MAEA,IAAI,qBAAqB,0DAAzB,EAAkC;AACvC,gBAAQ,SAAR,CAAkB,UAAU,OAAV,EAAlB;AACD,KAFM,MAEA,IAAI,qBAAqB,GAAzB,EAA8B;AACnC,gBAAQ,SAAR,EAAmB,OAAnB;AACD,KAFM,MAEA,IAAI,qBAAqB,8CAAzB,EAAiC;AACtC,mBAAW,SAAX,EAAsB,OAAtB;AACD,KAFM,MAEA,IAAI,MAAM,OAAN,CAAc,SAAd,CAAJ,EAA8B;AACnC,kBAAU,SAAV,EAAqB,OAArB;AACD,KAFM,MAEA,IAAI,OAAO,SAAP,KAAqB,QAAzB,EAAmC;AACxC;AACA,gBAAQ,IAAI,GAAJ,CAAQ,OAAO,OAAP,CAAe,SAAf,CAAR,CAAR,EAA4C,OAA5C;AACD,KAHM,MAGA;AACL,cAAM,IAAI,KAAJ,CAAU,wBAAV,CAAN;AACD;AACF;AAEK,SAAU,SAAV,CAAoB,UAApB,EAAuC,OAAvC,EAA8D;AAClE,eAAW,OAAX,GAAqB,OAArB,CAA8B,SAAD,IAAe,UAAU,SAAV,EAAqB,OAArB,CAA5C;AAEA,YAAQ,OAAR,CAAgB,WAAW,MAA3B;AACA,YAAQ,WAAR,CAAoB,0DAAO,IAA3B;AACD;AAEK,SAAU,UAAV,CAAqB,UAArB,EAAyC,OAAzC,EAAgE;AACpE,YAAQ,OAAR,CAAgB,CAAhB;AACA,YAAQ,WAAR,CAAoB,0DAAO,SAA3B;AACA,YAAQ,WAAR,CAAoB,0DAAO,UAA3B;AAEA,eAAW,KAAX,CAAiB,OAAjB,GAA2B,OAA3B,CAAoC,SAAD,IAAc;AAC/C,kBAAU,SAAV,EAAqB,OAArB;AACA,gBAAQ,WAAR,CAAoB,0DAAO,eAA3B;AACA,gBAAQ,WAAR,CAAoB,0DAAO,IAA3B;AACA,gBAAQ,WAAR,CAAoB,0DAAO,MAA3B;AACD,KALD;AAOA,YAAQ,WAAR,CAAoB,0DAAO,YAA3B;AACD;AAEK,SAAU,OAAV,CAAkB,UAAlB,EAA6C,OAA7C,EAAoE;AACxE,YAAQ,WAAR,CAAoB,0DAAO,MAA3B;AACA,YAAQ,WAAR,CAAoB,0DAAO,UAA3B;AAEA,UAAM,IAAN,CAAW,WAAW,OAAX,EAAX,EACG,OADH,GAEG,OAFH,CAEW,CAAC,CAAC,GAAD,EAAM,KAAN,CAAD,KAAiB;AACxB,gBAAQ,WAAR,CAAoB,0DAAO,eAA3B;AACA,kBAAU,GAAV,EAAe,OAAf;AACA,kBAAU,KAAV,EAAiB,OAAjB;AACA,gBAAQ,WAAR,CAAoB,0DAAO,OAA3B;AACD,KAPH;AASA,YAAQ,WAAR,CAAoB,0DAAO,YAA3B;AACD,C;;;;;;;;;;;;;;;;;AC5GD;AACA;AAEA;AACM,MAAO,UAAP,CAAiB;AAErB,gBAAY,MAAc,uDAA1B,EAAiF;AAC/E,aAAK,GAAL,GAAW,GAAX;AACD;AAED,UAAM,OAAN,CAAc,IAAd,EAA0B;AACxB,cAAM,UAAU,EAAE,MAAM,QAAR,EAAkB,MAAM,KAAK,QAAL,CAAc,OAAd,CAAxB,EAAhB;AAEA,cAAM,WAAW,MAAM,mDAAM,KAAK,GAAX,EAAgB;AACrC,oBAAQ,MAD6B;AAErC,kBAAM,KAAK,SAAL,CAAe,OAAf,CAF+B;AAGrC,qBAAS;AACP,gCAAgB;AADT;AAH4B,SAAhB,CAAvB;AAQA,cAAM,OAAO,MAAM,SAAS,IAAT,EAAnB;AACA,YAAI,KAAK,OAAL,KAAiB,CAArB,EAAwB;AACtB,kBAAM,IAAI,oDAAJ,CAAkB,KAAK,OAAvB,EAAgC,KAAK,SAArC,CAAN;AACD;AAED,YAAI,MAAc,KAAK,GAAvB;AACA,YAAI,MAAc,KAAK,GAAvB;AAEA,YAAI,IAAI,UAAJ,CAAe,IAAf,CAAJ,EAA0B;AACxB,kBAAM,IAAI,SAAJ,CAAc,CAAd,EAAiB,IAAI,WAAJ,CAAgB,GAAhB,CAAjB,CAAN;AACD;AAED,YAAI,IAAI,UAAJ,CAAe,IAAf,CAAJ,EAA0B;AACxB,kBAAM,IAAI,SAAJ,CAAc,CAAd,EAAiB,IAAI,WAAJ,CAAgB,GAAhB,CAAjB,CAAN;AACA,kBAAM,IAAI,OAAJ,CAAY,MAAZ,EAAoB,IAApB,CAAN;AACD;AAED,eAAO;AACL,iBAAK,IAAI,MAAJ,CAAW,GAAX,EAAgB,KAAhB,CADA;AAEL,iBAAK,IAAI,MAAJ,CAAW,GAAX,CAFA;AAGL,kBAAM,KAAK,KAAL,CAAW,GAAX,EAAgB;AAHjB,SAAP;AAKD;AAvCoB,C;;;;;;;;;;;;;;;;;;;ACJvB;AACA;AAQM,SAAU,cAAV,CAAyB,EAAE,IAAF,EAAQ,GAAR,EAAzB,EAA6D;AACjE,YAAQ,IAAR;AACE,aAAK,QAAL;AACE,mBAAO,IAAI,sDAAJ,CAAe,GAAf,CAAP;AACF,aAAK,QAAL;AACE,mBAAO,IAAI,sDAAJ,CAAe,GAAf,CAAP;AACF;AACE,kBAAM,IAAI,KAAJ,CAAU,sBAAV,CAAN;AANJ;AAQD;;;;;;;;;;;;;;;;;;;;;AClBD;AACA;AACA;AACA;AAEM,MAAO,UAAP,CAAiB;AAGrB,gBAAY,MAAc,uDAA1B,EAAiF;AAC/E,aAAK,GAAL,GAAW,GAAX;AACD;AAED,UAAM,OAAN,CAAc,IAAd,EAA0B;AACxB,cAAM,UAAU,EAAE,MAAM,QAAR,EAAkB,MAAM,KAAK,QAAL,CAAc,OAAd,CAAxB,EAAhB;AAEA,cAAM,WAAW,MAAM,mDAAM,KAAK,GAAX,EAAgB;AACrC,oBAAQ,MAD6B;AAErC,kBAAM,KAAK,SAAL,CAAe,OAAf,CAF+B;AAGrC,qBAAS;AACP,gCAAgB;AADT;AAH4B,SAAhB,CAAvB;AAQA,cAAM,OAAO,MAAM,SAAS,IAAT,EAAnB;AAEA,YAAI,KAAK,OAAL,KAAiB,CAArB,EAAwB;AACtB,kBAAM,IAAI,oDAAJ,CAAkB,KAAK,OAAvB,EAAgC,KAAK,SAArC,CAAN;AACD;AAED,YAAI,MAAc,KAAK,GAAvB;AACA,cAAM,MAAc,KAAK,GAAzB;AAEA;AACA,YAAI,IAAI,UAAJ,CAAe,IAAf,CAAJ,EAA0B;AACxB;AACA,kBAAM,IAAI,SAAJ,CAAc,CAAd,EAAiB,IAAI,WAAJ,CAAgB,GAAhB,CAAjB,CAAN;AACD;AAED,cAAM,OAAO,oEAAc,2DAAQ,UAAR,CAAmB,IAAI,MAAJ,CAAW,GAAX,EAAgB,KAAhB,CAAnB,EAA2C,OAA3C,EAAd,EAAoE,QAApE,CAA6E,KAA7E,CAAb;AAEA,YAAI,KAAJ;AACA,YAAI,OAAJ;AAEA,YAAI;AACF,gBAAI,KAAK,KAAL,KAAe,SAAnB,EAA8B;AAC5B,wBAAQ,KAAK,KAAL,CAAW,KAAK,KAAhB,CAAR;AACD;AAED,gBAAI,KAAK,OAAL,KAAiB,SAArB,EAAgC;AAC9B,0BAAU,KAAK,KAAL,CAAW,KAAK,OAAhB,CAAV;AACD;AACF,SARD,CAQE,OAAO,CAAP,EAAU;AACV;AACA,oBAAQ,IAAR,CAAa,iDAAb;AACD;AAED,eAAO;AACL,iBAAK,IAAI,MAAJ,CAAW,GAAX,EAAgB,KAAhB,CADA;AAEL,iBAAK,IAAI,MAAJ,CAAW,GAAX,CAFA;AAGL,gBAHK;AAIL,iBAJK;AAKL;AALK,SAAP;AAOD;AA1DoB,C;;;;;;;;;;;;;;AC0BjB,MAAO,aAAP,SAA6B,KAA7B,CAAkC;AAGtC,gBAAY,IAAZ,EAA0B,OAA1B,EAAyC;AACvC,cAAM,OAAN;AACA,aAAK,IAAL,GAAY,IAAZ;AACD;AANqC,C;;;;;;;;;;;;;;;;;AC/BxC;AAYM,MAAO,UAAP,CAAiB;AASrB,gBACE,UAA6B;AAC3B,cAAM,IAAI,MAAJ,CAAW,EAAX,CADqB;AAE3B,qBAAa,KAFc;AAG3B,cAAM,EAHqB;AAI3B,iBAAS,EAJkB;AAK3B,gBAAQ,EALmB;AAM3B,eAAO,EANoB;AAO3B,qBAAa;AAPc,KAD/B,EASG;AAED,aAAK,IAAL,GAAY,QAAQ,IAApB;AACA,aAAK,WAAL,GAAmB,QAAQ,WAA3B;AACA,aAAK,IAAL,GAAY,QAAQ,IAApB;AACA,aAAK,OAAL,GAAe,QAAQ,OAAvB;AACA,aAAK,MAAL,GAAc,QAAQ,MAAtB;AACA,aAAK,KAAL,GAAa,QAAQ,KAArB;AACA,aAAK,WAAL,GAAmB,QAAQ,WAA3B;AACD;AAED,cAAU,CAAV,EAAmB;AACjB,UAAE,aAAF,CAAgB,KAAK,IAArB;AACA,UAAE,UAAF,CAAa,KAAK,WAAL,GAAmB,CAAnB,GAAuB,CAApC;AACA,UAAE,WAAF,CAAc,KAAK,IAAnB;AACA,UAAE,WAAF,CAAc,KAAK,OAAnB;AACA,UAAE,WAAF,CAAc,KAAK,MAAnB;AACA,UAAE,WAAF,CAAc,KAAK,KAAnB;AACA,UAAE,WAAF,CAAc,KAAK,WAAnB;AACD;AAED,gBAAY,CAAZ,EAAqB;AACnB,aAAK,IAAL,GAAY,EAAE,YAAF,EAAZ;AACA,aAAK,WAAL,GAAmB,EAAE,QAAF,OAAiB,CAAjB,GAAqB,IAArB,GAA4B,KAA/C;AACA,aAAK,IAAL,GAAY,EAAE,aAAF,EAAZ;AACA,aAAK,OAAL,GAAe,EAAE,aAAF,EAAf;AACA,aAAK,MAAL,GAAc,EAAE,aAAF,EAAd;AACA,aAAK,KAAL,GAAa,EAAE,aAAF,EAAb;AACA,aAAK,WAAL,GAAmB,EAAE,aAAF,EAAnB;AACD;AAED,cAAO;AACL,cAAM,KAAK,IAAI,yDAAJ,EAAX;AACA,aAAK,SAAL,CAAe,EAAf;AACA,eAAO,IAAI,MAAJ,CAAW,GAAG,QAAH,EAAX,CAAP;AACD;AAED,cAAO;AACL,eAAO,KAAK,IAAZ;AACD;AAzDoB;AA4DjB,SAAU,YAAV,CAAuB,IAAvB,EAAgC;AACpC,WAAO,gBAAgB,UAAvB;AACD,C;;;;;;;;;;;;;;ACxEK,MAAO,UAAP,CAAiB;AAGrB,gBAAY,OAAe,IAAI,MAAJ,CAAW,EAAX,CAA3B,EAAyC;AACvC,aAAK,IAAL,GAAY,IAAZ;AACD;AAED,cAAU,CAAV,EAAmB;AACjB,YAAI;AACF,cAAE,aAAF,CAAgB,KAAK,IAArB;AACD,SAFD,CAEE,OAAO,CAAP,EAAU;AACV,kBAAM,IAAI,KAAJ,CAAU,qCAAqC,CAAC,EAAhD,CAAN;AACD;AACF;AAED,gBAAY,CAAZ,EAAqB;AACnB,YAAI;AACF,kBAAM,OAAO,EAAE,YAAF,EAAb;AAEA,iBAAK,IAAL,GAAY,IAAZ;AACD,SAJD,CAIE,OAAO,CAAP,EAAU;AACV,kBAAM,IAAI,KAAJ,CAAU,uCAAuC,CAAC,EAAlD,CAAN;AACD;AACF;AAvBoB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFvB;AACA;AACA;AACA;AACA;AACA;AAEO,MAAM,kBAAkB,EAAxB;AAGA,MAAM,aAAa,IAAnB;AACA,MAAM,SAAS,IAAf;AACA,MAAM,SAAS,IAAf;AAeD,MAAO,MAAP,CAAa;AACjB,WAAO,WAAP,CAAmB,CAAnB,EAA4B;AAC1B,cAAM,SAAS,EAAE,YAAF,EAAf;AACA,cAAM,SAAS,EAAE,YAAF,EAAf;AAEA,eAAO,IAAI,MAAJ,CAAW,MAAX,EAAmB,MAAnB,CAAP;AACD;AAID,gBAAY,MAAZ,EAA4B,MAA5B,EAA0C;AACxC,aAAK,MAAL,GAAc,MAAd;AACA,aAAK,MAAL,GAAc,MAAd;AACD;AAED,gBAAS;AACP,eAAO,KAAK,MAAZ;AACD;AAED,cAAU,CAAV,EAAmB;AACjB,UAAE,aAAF,CAAgB,KAAK,MAArB;AACA,UAAE,aAAF,CAAgB,KAAK,MAArB;AACD;AAtBgB;AAoCb,MAAO,WAAP,CAAkB;AAetB,gBAAY,EACV,UAAU,CADA,EAEV,SAAS,MAFC,EAGV,QAAQ,+CAAe,CAAC,GAAG,2DAAY,CAAZ,CAAJ,CAAf,EAAoC,IAApC,EAA0C,IAA1C,EAAgD,QAAhD,EAHE,EAIV,WAAW,gDAAgB,GAAhB,CAJD,EAKV,WAAW,gDAAgB,KAAhB,CALD,EAMV,QAAQ,IAAI,0DAAJ,CAAY,0CAAZ,CANE,EAOV,UAAU,IAAI,8DAAJ,EAPA,EAQV,OAAO,EARG,KASY,EATxB,EAS0B;AACxB,aAAK,OAAL,GAAe,OAAf;AACA,aAAK,MAAL,GAAc,MAAd;AACA,aAAK,KAAL,GAAa,KAAb;AACA,aAAK,QAAL,GAAgB,QAAhB;AACA,aAAK,QAAL,GAAgB,QAAhB;AACA,aAAK,KAAL,GAAa,KAAb;AACA,aAAK,OAAL,GAAe,OAAf;AACA,aAAK,IAAL,GAAY,IAAZ;AAEA,aAAK,IAAL,GAAY,wDAAQ,cAAR,CAAuB,wDAAK,MAAL,CAAY,KAAK,iBAAL,EAAZ,CAAvB,CAAZ;AACD;AAED,iBAAU;AACR,eAAO,KAAK,OAAZ;AACD;AAED,eAAQ;AACN,eAAO,KAAK,KAAZ;AACD;AAED,kBAAW;AACT,eAAO,KAAK,QAAZ;AACD;AAED,kBAAW;AACT,eAAO,KAAK,QAAZ;AACD;AACD,cAAO;AACL,eAAO,KAAK,IAAZ;AACD;AAED,gBAAS;AACP,eAAO,KAAK,MAAZ;AACD;AAED,eAAQ;AACN,eAAO,KAAK,KAAZ;AACD;AAED,aAAS,KAAT,EAAuB;AACrB,aAAK,KAAL,GAAa,KAAb;AACD;AAED,iBAAU;AACR,eAAO,KAAK,OAAZ;AACD;AAED,WAAO,GAAP,EAAkB;AAChB,aAAK,IAAL,CAAU,IAAV,CAAe,GAAf;AACD;AAED,4BAAqB;AACnB,cAAM,QAAmB,EAAzB;AAEA,aAAK,MAAM,GAAX,IAAkB,KAAK,IAAvB,EAA6B;AAC3B,kBAAM,IAAN,CAAW,2DAAQ,UAAR,CAAmB,IAAI,SAAJ,EAAnB,CAAX;AACD;AAED,eAAO,KAAP;AACD;AAED,cAAU,CAAV,EAAmB;AACjB,YAAI,KAAK,GAAL,KAAa,SAAjB,EAA4B;AAC1B,gBAAI,KAAK,GAAL,CAAS,MAAT,KAAoB,CAAxB,EAA2B;AACzB,sBAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;AACD;AAED,cAAE,UAAF,CAAa,KAAK,GAAlB;AACD,SAND,MAMO;AACL,cAAE,UAAF,CAAa,KAAK,iBAAL,EAAb;AACA,cAAE,UAAF,CAAa,KAAK,eAAL,EAAb;AACD;AACF;AAED,gBAAY,CAAZ,EAAqB;AACnB,cAAM,SAAS,EAAE,QAAF,EAAf;AACA,aAAK,mBAAL,CAAyB,CAAzB;AACA,cAAM,MAAM,EAAE,QAAF,EAAZ;AACA,cAAM,cAAc,MAAM,MAA1B;AACA,UAAE,IAAF,CAAO,CAAC,WAAR,EAAqB,UAArB;AACA,cAAM,cAAc,EAAE,SAAF,CAAY,WAAZ,CAApB;AAEA,cAAM,KAAK,0DAAW,QAAX,CAAX;AACA,WAAG,MAAH,CAAU,WAAV;AACA,aAAK,IAAL,GAAY,wDAAQ,cAAR,CAAuB,GAAG,MAAH,EAAvB,CAAZ;AAEA;AACA,cAAM,SAAS,EAAE,WAAF,GAAgB,QAAhB,EAAf;AAEA,YAAI,SAAS,eAAb,EAA8B;AAC5B,kBAAM,IAAI,KAAJ,CAAU,gCAAgC,MAAM,YAAY,eAAe,EAA3E,CAAN;AACD;AAED,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAApB,EAA4B,GAA5B,EAAiC;AAC/B,kBAAM,MAAM,OAAO,WAAP,CAAmB,CAAnB,CAAZ;AACA,iBAAK,IAAL,CAAU,IAAV,CAAe,GAAf;AACD;AAED,cAAM,OAAO,EAAE,QAAF,EAAb;AACA,cAAM,SAAS,OAAO,MAAtB;AACA,UAAE,IAAF,CAAO,CAAC,MAAR,EAAgB,UAAhB;AACA,aAAK,GAAL,GAAW,EAAE,SAAF,CAAY,MAAZ,CAAX;AACD;AAED,cAAO;AACL,cAAM,KAAK,IAAI,yDAAJ,EAAX;AACA,aAAK,SAAL,CAAe,EAAf;AACA,eAAO,IAAI,MAAJ,CAAW,GAAG,QAAH,EAAX,CAAP;AACD;AAED;;;AAGA,wBAAiB;AACf,cAAM,IAAI,IAAI,yDAAJ,EAAV;AACA,UAAE,UAAF,CAAa,KAAK,OAAlB;AACA,UAAE,UAAF,CAAa,KAAK,MAAlB;AACA,UAAE,WAAF,CAAc,KAAK,KAAnB;AACA,UAAE,WAAF,CAAc,KAAK,QAAnB;AACA,UAAE,WAAF,CAAc,KAAK,QAAnB;AACA,aAAK,KAAL,CAAW,SAAX,CAAqB,CAArB;AACA,aAAK,OAAL,CAAa,SAAb,CAAuB,CAAvB;AACA,UAAE,YAAF,CAAe,CAAf;AAEA,eAAO,EAAE,QAAF,EAAP;AACD;AAEO,wBAAoB,CAApB,EAA6B;AACnC,aAAK,OAAL,GAAe,EAAE,QAAF,EAAf;AACA,aAAK,MAAL,GAAc,EAAE,QAAF,EAAd;AACA,aAAK,KAAL,GAAa,EAAE,UAAF,EAAb;AACA,aAAK,QAAL,GAAgB,EAAE,UAAF,EAAhB;AACA,aAAK,QAAL,GAAgB,EAAE,UAAF,EAAhB;AACA,aAAK,KAAL,GAAa,2DAAQ,WAAR,CAAoB,EAAE,SAAF,CAAY,EAAZ,CAApB,CAAb;AAEA,YAAI,KAAK,MAAL,KAAgB,MAApB,EAA4B;AAC1B,kBAAM,KAAK,IAAI,8DAAJ,EAAX;AACA,eAAG,WAAH,CAAe,CAAf;AACA,iBAAK,OAAL,GAAe,EAAf;AACD,SAJD,MAIO,IAAI,KAAK,MAAL,KAAgB,MAApB,EAA4B;AACjC,kBAAM,KAAK,IAAI,8DAAJ,EAAX;AACA,eAAG,WAAH,CAAe,CAAf;AACA,iBAAK,OAAL,GAAe,EAAf;AACD,SAJM,MAIA;AACL,kBAAM,IAAI,KAAJ,CAAU,uBAAuB,KAAK,SAAL,EAAgB,EAAjD,CAAN;AACD;AAED,cAAM,SAAS,EAAE,WAAF,EAAf;AAEA,YAAI,CAAC,OAAO,MAAP,EAAL,EAAsB;AACpB,kBAAM,IAAI,KAAJ,CAAU,yCAAV,CAAN;AACD;AACF;AAEO,sBAAe;AACrB,cAAM,IAAI,IAAI,yDAAJ,EAAV;AACA,UAAE,YAAF,CAAe,KAAK,IAAL,CAAU,MAAzB;AAEA;AACA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,IAAL,CAAU,MAA9B,EAAsC,GAAtC,EAA2C;AACzC,iBAAK,IAAL,CAAU,CAAV,EAAa,SAAb,CAAuB,CAAvB;AACD;AAED,eAAO,EAAE,QAAF,EAAP;AACD;AA7LqB,C;;;;;;;;;;;;;;;;;;;;;;AC/DxB;AACA;AACA;AACA;AACA;AACA;AAmBM,MAAO,QAAP,CAAe;AAGnB,gBAAY,UAAZ,EAA8B;AAC5B,aAAK,UAAL,GAAkB,UAAlB;AACD;AAED,UAAM,UAAN,CAAiB,OAAjB,EAAiC;AAC/B,cAAM,SAAS,IAAI,4DAAJ,CAAc,KAAK,UAAnB,CAAf;AAEA,cAAM,WAAW,MAAM,OAAO,WAAP,CAAmB,QAAQ,OAAR,GAAkB,QAAlB,CAA2B,KAA3B,CAAnB,CAAvB;AACA,YAAI,SAAS,MAAT,KAAoB,iBAApB,IAAyC,SAAS,MAAT,KAAoB,kBAAjE,EAAqF;AACnF,mBAAO,KAAP;AACD,SAFD,MAEO;AACL,mBAAO,IAAP;AACD;AACF;AAED,UAAM,MAAN,CAAa,EACX,IADW,EAEX,cAAc,KAFH,EAGX,OAAO,EAHI,EAIX,UAAU,EAJC,EAKX,SAAS,EALE,EAMX,QAAQ,EANG,EAOX,cAAc,EAPH,EAQX,WAAW,KARA,EASX,WAAW,UATA,EAUX,eAVW,EAAb,EAWkB;AAChB,cAAM,UAAU,IAAI,mEAAJ,CAAe;AAC7B,gBAD6B;AAE7B,uBAF6B;AAG7B,gBAH6B;AAI7B,mBAJ6B;AAK7B,kBAL6B;AAM7B,iBAN6B;AAO7B;AAP6B,SAAf,CAAhB;AAUA,cAAM,KAAK,IAAI,6DAAJ,CAAgB;AACzB,oBAAQ,wDADiB;AAEzB,mBAFyB;AAGzB,sBAAU,gDAAgB,QAAhB,CAHe;AAIzB,sBAAU,gDAAgB,QAAhB;AAJe,SAAhB,CAAX;AAOA,YAAI,oBAAoB,SAAxB,EAAmC;AACjC,kBAAM,SAAS,gBAAgB,EAAhB,CAAf;AACA,gBAAI,kBAAkB,OAAtB,EAA+B;AAC7B,sBAAM,MAAN;AACD;AACF;AAED,cAAM,SAAS,IAAI,4DAAJ,CAAc,KAAK,UAAnB,CAAf;AAEA,cAAM,IAAI,IAAI,yDAAJ,EAAV;AACA,WAAG,SAAH,CAAa,CAAb;AAEA,cAAM,WAAW,MAAM,OAAO,kBAAP,CAA0B,EAAE,QAAF,EAA1B,EAAwC,KAAxC,CAAvB;AAEA,YAAI,SAAS,KAAT,KAAmB,CAAvB,EAA0B;AACxB,kBAAM,IAAI,KAAJ,CAAU,8BAA8B,SAAS,KAAK,MAAM,SAAS,MAAM,EAA3E,CAAN;AACD;AAED,cAAM,4DAAM,IAAN,CAAN;AACA,eAAO,MAAM,OAAO,iBAAP,CAAyB,SAAS,MAAlC,CAAb;AACD;AAnEkB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBrB;AACA;AACA;AACA;AACA;AAUA;AAEM,SAAU,UAAV,CAAqB,EAAE,aAAa,8BAAf,EAArB,EAAuF;AAC3F,WAAO;AACL;AADK,KAAP;AAGD;AAEK,SAAU,OAAV,CAAkB,EAAE,IAAF,EAAQ,IAAR,EAAc,GAAd,EAAlB,EAAqD;AACzD,UAAM,WAAW,iEAAe,EAAE,IAAF,EAAQ,GAAR,EAAf,CAAjB;AACA,WAAO,SAAS,OAAT,CAAiB,IAAjB,CAAP;AACD;AAEK,SAAU,MAAV,OAAsE;AAAA,QAArD,EAAE,MAAF,EAAU,OAAV,EAAmB,QAAnB,EAAqD;AAAA,QAArB,IAAqB;;AAC1E,UAAM,WAAW,IAAI,kDAAJ,CAAa,OAAO,UAApB,CAAjB;AACA,WAAO,SAAS,MAAT,cACF,IADE;AAEL,yBAAiB,MAAO,EAAP,IAAa;AAC5B,eAAG,QAAH,CAAY,QAAQ,OAApB;AACA,kBAAM,gEAAgB,EAAhB,EAAoB,OAApB,EAA6B,aAAa,SAAb,GAAyB,QAAzB,GAAoC,EAAjE,CAAN;AACD;AALI,OAAP;AAOD;AAEK,SAAU,UAAV,CAAqB,EAAE,MAAF,EAAU,UAAV,EAArB,EAA8D;AAClE,UAAM,WAAW,IAAI,kDAAJ,CAAa,OAAO,UAApB,CAAjB;AACA,WAAO,SAAS,UAAT,CAAoB,IAAI,0DAAJ,CAAY,UAAZ,CAApB,CAAP;AACD;AAEK,SAAU,MAAV,QAA+E;AAAA,QAA9D,EAAE,MAAF,EAAU,OAAV,EAAmB,QAAnB,EAA6B,OAA7B,EAA8D;AAAA,QAArB,IAAqB;;AACnF,UAAM,UAAU,IAAI,gDAAJ,CAAY,OAAO,UAAnB,CAAhB;AACA,WAAO,QAAQ,MAAR,cACF,IADE;AAEL,yBAAiB,MAAO,EAAP,IAAa;AAC5B,gBAAI,YAAY,SAAhB,EAA2B;AACzB,mBAAG,QAAH,CAAY,QAAQ,OAApB;AACA,sBAAM,gEAAgB,EAAhB,EAAoB,OAApB,EAA6B,aAAa,SAAb,GAAyB,QAAzB,GAAoC,EAAjE,CAAN;AACD;AAED,gBAAI,YAAY,SAAhB,EAA2B;AACzB,sBAAM,qEAAqB,EAArB,EAAyB,QAAQ,MAAjC,EAAyC,OAAzC,CAAN;AACD;AACF;AAXI,OAAP;AAaD;AAEK,SAAU,QAAV,QAA0E;AAAA,QAAvD,EAAE,MAAF,EAAU,OAAV,EAAmB,QAAnB,EAAuD;AAAA,QAAvB,IAAuB;;AAC9E,UAAM,aAAa,IAAI,sDAAJ,CAAe,OAAO,UAAtB,CAAnB;AACA,WAAO,WAAW,QAAX,cACF,IADE;AAEL,yBAAiB,MAAO,EAAP,IAAa;AAC5B,gBAAI,YAAY,SAAhB,EAA2B;AACzB,mBAAG,QAAH,CAAY,QAAQ,OAApB;AACA,sBAAM,gEAAgB,EAAhB,EAAoB,OAApB,EAA6B,aAAa,SAAb,GAAyB,QAAzB,GAAoC,EAAjE,CAAN;AACD;AACF;AAPI,OAAP;AASD;AAEK,SAAU,WAAV,QAA6E;AAAA,QAAvD,EAAE,MAAF,EAAU,OAAV,EAAmB,QAAnB,EAAuD;AAAA,QAAvB,IAAuB;;AACjF,UAAM,aAAa,IAAI,sDAAJ,CAAe,OAAO,UAAtB,CAAnB;AACA,WAAO,WAAW,WAAX,cACF,IADE;AAEL,yBAAiB,MAAO,EAAP,IAAa;AAC5B,gBAAI,YAAY,SAAhB,EAA2B;AACzB,mBAAG,QAAH,CAAY,QAAQ,OAApB;AACA,sBAAM,gEAAgB,EAAhB,EAAoB,OAApB,EAA6B,aAAa,SAAb,GAAyB,QAAzB,GAAoC,EAAjE,CAAN;AACD;AACF;AAPI,OAAP;AASD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC7FA;AACA;AACA;AACA;AACA;AACA;AAoBM,SAAU,kBAAV,CAA6B,QAA7B,EAA+C,MAA/C,EAA+D,UAA/D,EAAgF;AACpF,UAAM,UAA0B,IAAI,iEAAJ,EAAhC;AAEA,iBAAa,CAAC,MAAD,EAAS,UAAT,CAAb;AAEA,eAAW,OAAX,GAAqB,OAArB,CAA8B,SAAD,IAAe,gEAAU,SAAV,EAAqB,OAArB,CAA5C;AAEA,YAAQ,WAAR,CAAoB,0DAAO,OAA3B;AACA,YAAQ,UAAR,CAAmB,oEAAc,IAAI,MAAJ,CAAW,QAAX,EAAqB,KAArB,CAAd,CAAnB;AAEA,UAAM,OAAO,QAAQ,UAAR,EAAb;AACA,WAAO,IAAP;AACD;AAEK,MAAO,OAAP,CAAc;AAGlB,gBAAY,UAAZ,EAA8B;AAC5B,aAAK,UAAL,GAAkB,UAAlB;AACD;AAED,UAAM,MAAN,CAAa,EACX,MADW,EAEX,aAAa,EAFF,EAGX,QAHW,EAIX,WAAW,KAJA,EAKX,WAAW,UALA,EAMX,OANW,EAOX,eAPW,EAQX,OAAO,IARI,EASX,QAAQ,KATG,EAAb,EAUiB;AACf,YAAI,KAAJ,EAAW;AACT,oBAAQ,IAAR,CAAa,iCAAiC,MAAM,KAApD;AACD;AAED,cAAM,UAAU,IAAI,mEAAJ,CAAe,mBAAmB,QAAnB,EAA6B,MAA7B,EAAqC,UAArC,CAAf,CAAhB;AAEA,YAAI,KAAJ,EAAW;AACT,kBAAM,gBAAgB,IAAI,yDAAJ,EAAtB;AACA,oBAAQ,SAAR,CAAkB,aAAlB;AACA,oBAAQ,GAAR,CAAY,eAAe,cAAc,QAAd,GAAyB,QAAzB,CAAkC,KAAlC,CAAwC,EAAnE;AACD;AAED,cAAM,KAAK,IAAI,6DAAJ,CAAgB;AACzB,oBAAQ,wDADiB;AAEzB,mBAFyB;AAGzB,sBAAU,gDAAgB,QAAhB,CAHe;AAIzB,sBAAU,gDAAgB,QAAhB;AAJe,SAAhB,CAAX;AAOA,YAAI,KAAJ,EAAW;AACT,kBAAM,WAAW,IAAI,yDAAJ,EAAjB;AACA,eAAG,SAAH,CAAa,QAAb;AACA,oBAAQ,GAAR,CAAY,mBAAmB,SAAS,QAAT,GAAoB,QAApB,CAA6B,KAA7B,CAAmC,EAAlE;AACD;AAED,YAAI,oBAAoB,SAAxB,EAAmC;AACjC,kBAAM,SAAS,gBAAgB,EAAhB,CAAf;AACA,gBAAI,kBAAkB,OAAtB,EAA+B;AAC7B,sBAAM,MAAN;AACD;AACF;AAED,cAAM,SAAS,IAAI,4DAAJ,CAAc,KAAK,UAAnB,CAAf;AAEA,cAAM,IAAI,IAAI,yDAAJ,EAAV;AACA,WAAG,SAAH,CAAa,CAAb;AAEA,cAAM,WAAW,MAAM,OAAO,kBAAP,CAA0B,EAAE,QAAF,EAA1B,EAAwC,OAAxC,CAAvB;AAEA,YAAI,SAAS,KAAT,KAAmB,CAAvB,EAA0B;AACxB,kBAAM,IAAI,KAAJ,CAAU,gCAAgC,SAAS,MAAnD,CAAN;AACD;AAED,YAAI,WAAW,CAAC,IAAhB,EAAsB;AACpB,mBAAO,QAAP;AACD;AAED,cAAM,4DAAM,IAAN,CAAN;AACA,eAAO,MAAM,OAAO,iBAAP,CAAyB,SAAS,MAAlC,CAAb;AACD;AAnEiB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBpB;AAGA;;;AAGM,MAAO,SAAP,CAAgB;AAMpB,gBAAY,MAAc,8BAA1B,EAAwD;AACtD,aAAK,GAAL,GAAW,GAAX;AACD;AAED;;;AAGA,aAAM;AACJ,eAAO,KAAK,GAAZ;AACD;AAED;;;;;AAKA,gBAAY,MAAZ,EAA4B,GAAG,MAA/B,EAA4C;AAC1C,cAAM,UAAU;AACd,qBAAS,KADK;AAEd,kBAFc;AAGd,kBAHc;AAId,gBAAI;AAJU,SAAhB;AAOA,eAAO,OAAP;AACD;AAED,gBAAY,GAAZ,EAAoB;AAClB,eAAO,mDAAM,KAAK,GAAX,EAAgB;AACrB,oBAAQ,MADa;AAErB,kBAAM,KAAK,SAAL,CAAe,GAAf,CAFe;AAGrB,qBAAS;AACP,gCAAgB;AADT;AAHY,SAAhB,EAMJ,IANI,CAME,QAAD,IAAc,SAAS,IAAT,EANf,CAAP;AAOD;AAED;;;;;AAKA,eAAW,OAAX,EAA2B;AACzB,cAAM,MAAM,KAAK,WAAL,CAAiB,YAAjB,EAA+B,QAAQ,QAAR,EAA/B,CAAZ;AACA,eAAO,KAAK,WAAL,CAAiB,GAAjB,CAAP;AACD;AAED;;;;;AAKA,kBAAc,OAAd,EAA8B;AAC5B,cAAM,MAAM,KAAK,WAAL,CAAiB,eAAjB,EAAkC,QAAQ,QAAR,EAAlC,CAAZ;AACA,eAAO,KAAK,WAAL,CAAiB,GAAjB,CAAP;AACD;AAED;;;;;AAKA,uBAAmB,IAAnB,EAA0C,UAAmB,KAA7D,EAAkE;AAChE,YAAI,GAAJ;AAEA,YAAI,gBAAgB,MAApB,EAA4B;AAC1B,mBAAO,KAAK,QAAL,CAAc,KAAd,CAAP;AACD;AAED,YAAI,OAAJ,EAAa;AACX,kBAAM,KAAK,WAAL,CAAiB,oBAAjB,EAAuC,IAAvC,EAA6C,CAA7C,CAAN;AACD,SAFD,MAEO;AACL,kBAAM,KAAK,WAAL,CAAiB,oBAAjB,EAAuC,IAAvC,CAAN;AACD;AAED,eAAO,KAAK,WAAL,CAAiB,GAAjB,CAAP;AACD;AAED;;;;;AAKA,sBAAkB,MAAlB,EAAgC;AAC9B,cAAM,MAAM,KAAK,WAAL,CAAiB,mBAAjB,EAAsC,MAAtC,CAAZ;AACA,eAAO,KAAK,WAAL,CAAiB,GAAjB,CAAP;AACD;AAED;;;;;AAKA,0BAAsB,MAAtB,EAAoC;AAClC,cAAM,MAAM,KAAK,WAAL,CAAiB,mBAAjB,EAAsC,MAAtC,EAA8C,CAA9C,CAAZ;AACA,eAAO,KAAK,WAAL,CAAiB,GAAjB,CAAP;AACD;AAED;;;AAGA,mBAAY;AACV,cAAM,MAAM,KAAK,WAAL,CAAiB,oBAAjB,CAAZ;AACA,eAAO,KAAK,WAAL,CAAiB,GAAjB,CAAP;AACD;AAED;;;AAGA,qBAAc;AACZ,cAAM,MAAM,KAAK,WAAL,CAAiB,eAAjB,CAAZ;AACA,eAAO,KAAK,WAAL,CAAiB,GAAjB,CAAP;AACD;AAED;;;AAGA,oBAAa;AACX,cAAM,MAAM,KAAK,WAAL,CAAiB,eAAjB,CAAZ;AACA,eAAO,KAAK,WAAL,CAAiB,GAAjB,CAAP;AACD;AAED;;;;;AAKA,iBAAa,KAAb,EAAmC;AACjC,cAAM,MAAM,KAAK,WAAL,CAAiB,UAAjB,EAA6B,KAA7B,EAAoC,CAApC,CAAZ;AACA,eAAO,KAAK,WAAL,CAAiB,GAAjB,CAAP;AACD;AAED;;;;;AAKA,gBAAY,IAAZ,EAAwB;AACtB,cAAM,MAAM,KAAK,WAAL,CAAiB,kBAAjB,EAAqC,IAArC,CAAZ;AACA,eAAO,KAAK,WAAL,CAAiB,GAAjB,CAAP;AACD;AAED;;;;;AAKA,oBAAgB,QAAhB,EAAgC;AAC9B,cAAM,MAAM,KAAK,WAAL,CAAiB,kBAAjB,EAAqC,QAArC,EAA+C,CAA/C,CAAZ;AACA,eAAO,KAAK,WAAL,CAAiB,GAAjB,CAAP;AACD;AAED;;;;;;AAMA,aAAS,KAAT,EAA+B;AAC7B,cAAM,MAAM,KAAK,WAAL,CAAiB,UAAjB,EAA6B,KAA7B,CAAZ;AACA,eAAO,KAAK,WAAL,CAAiB,GAAjB,CAAP;AACD;AAED;;;;;;;AAOA,sBAAkB,KAAlB,EAAwC;AACtC,cAAM,MAAM,KAAK,WAAL,CAAiB,mBAAjB,EAAsC,KAAtC,CAAZ;AACA,eAAO,KAAK,WAAL,CAAiB,GAAjB,CAAP;AACD;AAED;;;;AAIA,2BAAuB,MAAvB,EAAqC;AACnC,cAAM,MAAM,KAAK,WAAL,CAAiB,wBAAjB,EAA2C,MAA3C,CAAZ;AACA,eAAO,KAAK,WAAL,CAAiB,GAAjB,CAAP;AACD;AAED;;;;;AAKA,eAAW,QAAX,EAA6B,GAA7B,EAAwC;AACtC,cAAM,MAAM,KAAK,WAAL,CAAiB,YAAjB,EAA+B,QAA/B,EAAyC,GAAzC,CAAZ;AACA,eAAO,KAAK,WAAL,CAAiB,GAAjB,CAAP;AACD;AAED;;;;AAIA,mBAAe,IAAf,EAA2B;AACzB,cAAM,MAAM,KAAK,WAAL,CAAiB,gBAAjB,EAAmC,IAAnC,CAAZ;AACA,eAAO,KAAK,WAAL,CAAiB,GAAjB,CAAP;AACD;AAED;;;;;;AAMA,iBAAa,KAAb,EAA4B,IAA5B,EAA2C,EAA3C,EAAsD;AACpD,cAAM,MAAM,KAAK,WAAL,CAAiB,cAAjB,EAAiC,KAAjC,EAAwC,KAAK,QAAL,EAAxC,EAAyD,GAAG,QAAH,EAAzD,CAAZ;AACA,eAAO,KAAK,WAAL,CAAiB,GAAjB,CAAP;AACD;AA1NmB,C;;;;;;;;;;;;;;;;;;;;;;;;;ACxBtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBM,MAAO,UAAP,CAAiB;AAGrB,gBAAY,UAAZ,EAA8B;AAC5B,aAAK,UAAL,GAAkB,UAAlB;AACD;AAED,UAAM,QAAN,CAAe,EACb,MADa,EAEb,EAFa,EAGb,MAHa,EAIb,KAJa,EAKb,WAAW,KALE,EAMb,WAAW,UANE,EAOb,eAPa,EAQb,OAAO,IARM,EAAf,EAS4B;AAC1B,YAAI,WAAW,IAAI,mDAAJ,CAAc,MAAd,CAAf;AACA,YAAI,UAAU,KAAd,EAAqB;AACnB,uBAAW,SAAS,SAAT,CAAmB,CAAnB,CAAX;AACD;AAED,cAAM,UAA0B,IAAI,iEAAJ,EAAhC;AAEA,cAAM,OAAO,IAAI,qDAAJ,CAAW,CAAC,MAAD,EAAS,EAAT,EAAa,gDAAgB,SAAS,QAAT,EAAhB,CAAb,EAAmD,OAAnD,EAAX,CAAb;AACA,cAAM,aAAa,CAAC,CAAD,EAAI,IAAI,0DAAJ,CAAY,KAAK,WAAL,CAAiB,KAAjB,CAAZ,CAAJ,EAA0C,UAA1C,EAAsD,CAAC,IAAD,CAAtD,CAAnB;AAEA,mBAAW,OAAX,GAAqB,OAArB,CAA8B,SAAD,IAAe,gEAAU,SAAV,EAAqB,OAArB,CAA5C;AACA,gBAAQ,WAAR,CAAoB,0DAAO,OAA3B;AACA,gBAAQ,SAAR,CAAkB,IAAI,MAAJ,CAAW,wBAAX,CAAlB;AAEA,cAAM,OAAO,QAAQ,UAAR,EAAb;AACA,cAAM,UAAU,IAAI,mEAAJ,CAAe,IAAf,CAAhB;AAEA,cAAM,KAAK,IAAI,6DAAJ,CAAgB;AACzB,oBAAQ,wDADiB;AAEzB,mBAFyB;AAGzB,sBAAU,gDAAgB,QAAhB,CAHe;AAIzB,sBAAU,gDAAgB,QAAhB;AAJe,SAAhB,CAAX;AAOA,YAAI,oBAAoB,SAAxB,EAAmC;AACjC,kBAAM,SAAS,gBAAgB,EAAhB,CAAf;AACA,gBAAI,kBAAkB,OAAtB,EAA+B;AAC7B,sBAAM,MAAN;AACD;AACF;AAED,cAAM,SAAS,IAAI,4DAAJ,CAAc,KAAK,UAAnB,CAAf;AACA,cAAM,IAAI,IAAI,yDAAJ,EAAV;AACA,WAAG,SAAH,CAAa,CAAb;AAEA,cAAM,WAAW,MAAM,OAAO,kBAAP,CAA0B,EAAE,QAAF,EAA1B,EAAwC,KAAxC,CAAvB;AAEA,YAAI,SAAS,KAAT,KAAmB,CAAvB,EAA0B;AACxB,kBAAM,IAAI,KAAJ,CAAU,gCAAgC,SAAS,KAAK,MAAM,SAAS,MAAM,EAA7E,CAAN;AACD;AAED,YAAI,CAAC,IAAL,EAAW;AACT,mBAAO,QAAP;AACD;AAED,cAAM,4DAAM,IAAN,CAAN;AACA,eAAO,MAAM,OAAO,iBAAP,CAAyB,SAAS,MAAlC,CAAb;AACD;AAED,UAAM,WAAN,CAAkB,EAChB,MADgB,EAEhB,EAFgB,EAGhB,MAHgB,EAIhB,WAAW,KAJK,EAKhB,WAAW,UALK,EAMhB,eANgB,EAOhB,OAAO,IAPS,EAAlB,EAQ4B;AAC1B,cAAM,WAAW,IAAI,mDAAJ,CAAc,MAAd,EAAsB,SAAtB,CAAgC,CAAhC,CAAjB;AAEA,cAAM,UAA0B,IAAI,iEAAJ,EAAhC;AAEA,cAAM,OAAO,IAAI,qDAAJ,CACX,CAAC,MAAD,EAAS,IAAI,0DAAJ,CAAY,KAAK,WAAL,CAAiB,KAAjB,CAAZ,CAAT,EAA+C,EAA/C,EAAmD,gDAAgB,SAAS,QAAT,EAAhB,CAAnD,EAAyF,OAAzF,EADW,CAAb;AAGA,cAAM,aAAa,CAAC,CAAD,EAAI,IAAI,0DAAJ,CAAY,KAAK,WAAL,CAAiB,KAAjB,CAAZ,CAAJ,EAA0C,cAA1C,EAA0D,IAA1D,CAAnB;AAEA,mBAAW,OAAX,GAAqB,OAArB,CAA8B,SAAD,IAAe,gEAAU,SAAV,EAAqB,OAArB,CAA5C;AACA,gBAAQ,WAAR,CAAoB,0DAAO,OAA3B;AACA,gBAAQ,SAAR,CAAkB,IAAI,MAAJ,CAAW,wBAAX,CAAlB;AAEA,cAAM,OAAO,QAAQ,UAAR,EAAb;AACA,cAAM,UAAU,IAAI,mEAAJ,CAAe,IAAf,CAAhB;AAEA,cAAM,KAAK,IAAI,6DAAJ,CAAgB;AACzB,oBAAQ,wDADiB;AAEzB,mBAFyB;AAGzB,sBAAU,gDAAgB,QAAhB,CAHe;AAIzB,sBAAU,gDAAgB,QAAhB;AAJe,SAAhB,CAAX;AAOA,YAAI,oBAAoB,SAAxB,EAAmC;AACjC,kBAAM,SAAS,gBAAgB,EAAhB,CAAf;AACA,gBAAI,kBAAkB,OAAtB,EAA+B;AAC7B,sBAAM,MAAN;AACD;AACF;AAED,cAAM,SAAS,IAAI,4DAAJ,CAAc,KAAK,UAAnB,CAAf;AACA,cAAM,IAAI,IAAI,yDAAJ,EAAV;AACA,WAAG,SAAH,CAAa,CAAb;AAEA,cAAM,WAAW,MAAM,OAAO,kBAAP,CAA0B,EAAE,QAAF,EAA1B,EAAwC,KAAxC,CAAvB;AAEA,YAAI,SAAS,KAAT,KAAmB,CAAvB,EAA0B;AACxB,kBAAM,IAAI,KAAJ,CAAU,oCAAoC,SAAS,KAAK,MAAM,SAAS,MAAM,EAAjF,CAAN;AACD;AAED,YAAI,CAAC,IAAL,EAAW;AACT,mBAAO,QAAP;AACD;AAED,cAAM,4DAAM,IAAN,CAAN;AACA,eAAO,MAAM,OAAO,iBAAP,CAAyB,SAAS,MAAlC,CAAb;AACD;AAEO,gBAAY,KAAZ,EAAyB;AAC/B,YAAI,UAAU,KAAd,EAAqB;AACnB,mBAAO,0CAAP;AACD,SAFD,MAEO,IAAI,UAAU,KAAd,EAAqB;AAC1B,mBAAO,0CAAP;AACD,SAFM,MAEA;AACL,kBAAM,IAAI,KAAJ,CAAU,kBAAkB,KAAK,GAAjC,CAAN;AACD;AACF;AAnIoB,C;;;;;;;;;;;;;;;;;;;;;;;;;ACzBvB;AACA;AACA;AAUA;AAGM,SAAU,UAAV,CAAqB,UAArB,EAAuC;AAC3C,UAAM,IAAI,gDAAgB,UAAhB,EAA4B,MAA5B,CAAV;AACA,WAAO,0DAAO,eAAP,CAAuB,CAAvB,CAAP;AACD;AAEK,SAAU,YAAV,CAAuB,QAAvB,EAA0C;AAC9C,UAAM,SAAS,0DAAO,MAAP,EAAf;AAEA,aAAS,OAAT,CAAkB,OAAD,IAAa,OAAO,UAAP,CAAkB,OAAlB,CAA9B;AACA,WAAO,MAAP;AACD;AAEK,SAAU,aAAV,CAAwB,UAAxB,EAA0C;AAC9C,WAAO,2DAAQ,MAAR,CAAe,2DAAY,CAAZ,EAAe,QAAf,CAAwB,KAAxB,CAAf,EAA+C,8DAAW,WAAX,CAAuB,IAAI,MAAJ,CAAW,UAAX,EAAuB,KAAvB,CAAvB,CAA/C,EAAsG,EAAtG,CAAP;AACD;AAEM,eAAe,eAAf,CAA+B,EAA/B,EAAgD,OAAhD,EAAkE,QAAlE,EAAkF;AACvF,UAAM,QAAQ,GAAG,iBAAH,EAAd;AACA,UAAM,OAAO,wDAAK,MAAL,CAAY,wDAAK,MAAL,CAAY,KAAZ,CAAZ,CAAb;AAEA,UAAM,aAAa,MAAM,QAAQ,UAAR,CAAmB,QAAnB,CAAzB;AACA,UAAM,YAAY,WAAW,YAAX,EAAlB;AACA,UAAM,YAAY,MAAM,WAAW,IAAX,CAAgB,IAAhB,CAAxB;AAEA,UAAM,kBAAkB,6EAAkB,CAAC,UAAU,SAAV,EAAD,CAAlB,CAAxB;AACA,UAAM,qBAAqB,6EAAkB,SAAlB,CAA3B;AAEA,UAAM,MAAM,IAAI,wDAAJ,CAAW,eAAX,EAA4B,kBAA5B,CAAZ;AACA,OAAG,MAAH,CAAU,GAAV;AACD;AAEM,eAAe,oBAAf,CAAoC,EAApC,EAAqD,CAArD,EAAgE,OAAhE,EAAiF;AACtF,UAAM,QAAQ,GAAG,iBAAH,EAAd;AACA,UAAM,OAAO,wDAAK,MAAL,CAAY,wDAAK,MAAL,CAAY,KAAZ,CAAZ,CAAb;AACA,UAAM,aAAuB,EAA7B;AACA,UAAM,aAA0B,EAAhC;AAEA,SAAK,MAAM,MAAX,IAAqB,OAArB,EAA8B;AAC5B,cAAM,aAAa,MAAM,OAAO,OAAP,CAAe,UAAf,CAA0B,OAAO,QAAjC,CAAzB;AACA,cAAM,YAAY,WAAW,YAAX,EAAlB;AACA,cAAM,YAAY,MAAM,WAAW,IAAX,CAAgB,IAAhB,CAAxB;AAEA,mBAAW,IAAX,CAAgB,SAAhB;AACA,mBAAW,IAAX,CAAgB,UAAU,SAAV,EAAhB;AACD;AAED,UAAM,kBAAkB,6EAAkB,UAAlB,CAAxB;AACA,UAAM,qBAAqB,mFAAwB,CAAxB,EAA2B,UAA3B,CAA3B;AAEA,UAAM,MAAM,IAAI,wDAAJ,CAAW,eAAX,EAA4B,kBAA5B,CAAZ;AACA,OAAG,MAAH,CAAU,GAAV;AACD,C;;;;;;;;;;;AClED,yC;;;;;;;;;;;ACAA,wC;;;;;;;;;;;ACAA,mC;;;;;;;;;;;ACAA,+B;;;;;;;;;;;ACAA,iC;;;;;;;;;;;ACAA,+C","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","export class Struct {\n  items: any[];\n\n  constructor(items: any[]) {\n    this.items = items;\n  }\n}\n","import { Reader, Writer } from 'ontology-ts-crypto';\n\nconst UINT256_SIZE = 32;\n\nexport class Uint256 {\n  static parseFromBytes(b: Buffer): Uint256 {\n    const r = new Reader(b);\n    const u = new Uint256();\n    u.deserialize(r);\n\n    return u;\n  }\n  private value: Buffer;\n\n  toArray(): Buffer {\n    const bf = new Writer();\n    this.serialize(bf);\n    return new Buffer(bf.getBytes());\n  }\n\n  serialize(w: Writer) {\n    w.writeBytes(this.value);\n  }\n\n  deserialize(r: Reader) {\n    try {\n      this.value = r.readBytes(UINT256_SIZE);\n    } catch (e) {\n      throw new Error('deserialize Uint256 error');\n    }\n  }\n}\n","import { readFileSync } from 'fs';\nimport * as Long from 'long';\nimport { Address, OpCode, ProgramBuilder, Serialize } from 'ontology-ts-crypto';\nimport { Struct } from './struct';\n\nexport function sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport function loadContract(path: string) {\n  return readFileSync(path);\n}\n\nexport function loadCompiledContract(path: string) {\n  const codeBuffer = readFileSync(path);\n  const codeString = codeBuffer.toString();\n  return new Buffer(codeString, 'hex');\n}\n\nexport function loadOptionsFile(path: string) {\n  return readFileSync(path).toString();\n}\n\nexport function reverseBuffer(src: Buffer) {\n  const buffer = Buffer.allocUnsafe(src.length);\n\n  for (let i = 0, j = src.length - 1; i <= j; ++i, --j) {\n    buffer[i] = src[j];\n    buffer[j] = src[i];\n  }\n\n  return buffer;\n}\n\nexport function hex2num(str: string) {\n  const buffer = new Buffer(str, 'hex');\n  return Serialize.bigIntFromBytes(buffer).toJSNumber();\n}\n\nexport function pushParam(parameter: any, builder: ProgramBuilder) {\n  if (typeof parameter === 'boolean') {\n    builder.pushBool(parameter);\n    builder.writeOpCode(OpCode.PUSH0);\n    builder.writeOpCode(OpCode.BOOLOR);\n  } else if (typeof parameter === 'number') {\n    builder.pushNum(parameter);\n    builder.writeOpCode(OpCode.PUSH0);\n    builder.writeOpCode(OpCode.ADD);\n  } else if (parameter instanceof Long) {\n    builder.pushNum(parameter);\n    builder.writeOpCode(OpCode.PUSH0);\n    builder.writeOpCode(OpCode.ADD);\n  } else if (typeof parameter === 'string') {\n    builder.pushBytes(new Buffer(parameter));\n  } else if (parameter instanceof Buffer) {\n    builder.pushBytes(parameter);\n  } else if (parameter instanceof Address) {\n    builder.pushBytes(parameter.toArray());\n  } else if (parameter instanceof Map) {\n    pushMap(parameter, builder);\n  } else if (parameter instanceof Struct) {\n    pushStruct(parameter, builder);\n  } else if (Array.isArray(parameter)) {\n    pushArray(parameter, builder);\n  } else if (typeof parameter === 'object') {\n    // this is last, because other classes are also objects\n    pushMap(new Map(Object.entries(parameter)), builder);\n  } else {\n    throw new Error('Unsupported param type');\n  }\n}\n\nexport function pushArray(parameters: any[], builder: ProgramBuilder) {\n  parameters.reverse().forEach((parameter) => pushParam(parameter, builder));\n\n  builder.pushNum(parameters.length);\n  builder.writeOpCode(OpCode.PACK);\n}\n\nexport function pushStruct(parameters: Struct, builder: ProgramBuilder) {\n  builder.pushNum(0);\n  builder.writeOpCode(OpCode.NEWSTRUCT);\n  builder.writeOpCode(OpCode.TOALTSTACK);\n\n  parameters.items.reverse().forEach((parameter) => {\n    pushParam(parameter, builder);\n    builder.writeOpCode(OpCode.DUPFROMALTSTACK);\n    builder.writeOpCode(OpCode.SWAP);\n    builder.writeOpCode(OpCode.APPEND);\n  });\n\n  builder.writeOpCode(OpCode.FROMALTSTACK);\n}\n\nexport function pushMap(parameters: Map<any, any>, builder: ProgramBuilder) {\n  builder.writeOpCode(OpCode.NEWMAP);\n  builder.writeOpCode(OpCode.TOALTSTACK);\n\n  Array.from(parameters.entries())\n    .reverse()\n    .forEach(([key, value]) => {\n      builder.writeOpCode(OpCode.DUPFROMALTSTACK);\n      pushParam(key, builder);\n      pushParam(value, builder);\n      builder.writeOpCode(OpCode.SETITEM);\n    });\n\n  builder.writeOpCode(OpCode.FROMALTSTACK);\n}\n","import fetch from 'cross-fetch';\nimport { Compiler, CompilerError, CompilerOutput } from './types';\n\n// tslint:disable:quotemark\nexport class CsCompiler implements Compiler {\n  url: string;\n  constructor(url: string = 'https://smartxcompiler.ont.io/api/v1.0/csharp/compile') {\n    this.url = url;\n  }\n\n  async compile(code: Buffer): Promise<CompilerOutput> {\n    const payload = { type: 'CSharp', code: code.toString('utf-8') };\n\n    const response = await fetch(this.url, {\n      method: 'POST',\n      body: JSON.stringify(payload),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    const json = await response.json();\n    if (json.errcode !== 0) {\n      throw new CompilerError(json.errcode, json.errdetail);\n    }\n\n    let avm: string = json.avm;\n    let abi: string = json.abi;\n\n    if (avm.startsWith(\"b'\")) {\n      avm = avm.substring(2, avm.lastIndexOf(\"'\"));\n    }\n\n    if (abi.startsWith(\"b'\")) {\n      abi = abi.substring(2, abi.lastIndexOf(\"'\"));\n      abi = abi.replace(/\\\\n/g, '\\n');\n    }\n\n    return {\n      avm: new Buffer(avm, 'hex'),\n      abi: new Buffer(abi),\n      hash: JSON.parse(abi).hash\n    };\n  }\n}\n","import { CsCompiler } from './csCompiler';\nimport { PyCompiler } from './pyCompiler';\nimport { CompilerType } from './types';\n\nexport interface CreateCompilerOptions {\n  type: CompilerType;\n  url?: string;\n}\n\nexport function createCompiler({ type, url }: CreateCompilerOptions) {\n  switch (type) {\n    case 'Python':\n      return new PyCompiler(url);\n    case 'CSharp':\n      return new CsCompiler(url);\n    default:\n      throw new Error('Unsupported compiler');\n  }\n}\n\nexport * from './types';\n","import fetch from 'cross-fetch';\nimport { Address } from 'ontology-ts-crypto';\nimport { reverseBuffer } from '../common/utils';\nimport { Compiler, CompilerError, CompilerOutput, Debug, FuncMap } from './types';\n\nexport class PyCompiler implements Compiler {\n  url: string;\n\n  constructor(url: string = 'https://smartxcompiler.ont.io/api/beta/python/compile') {\n    this.url = url;\n  }\n\n  async compile(code: Buffer): Promise<CompilerOutput> {\n    const payload = { type: 'Python', code: code.toString('utf-8') };\n\n    const response = await fetch(this.url, {\n      method: 'POST',\n      body: JSON.stringify(payload),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    const json = await response.json();\n\n    if (json.errcode !== 0) {\n      throw new CompilerError(json.errcode, json.errdetail);\n    }\n\n    let avm: string = json.avm;\n    const abi: string = json.abi;\n\n    // tslint:disable-next-line:quotemark\n    if (avm.startsWith(\"b'\")) {\n      // tslint:disable-next-line:quotemark\n      avm = avm.substring(2, avm.lastIndexOf(\"'\"));\n    }\n\n    const hash = reverseBuffer(Address.fromVmCode(new Buffer(avm, 'hex')).toArray()).toString('hex');\n\n    let debug: Debug | undefined;\n    let funcMap: FuncMap | undefined;\n\n    try {\n      if (json.debug !== undefined) {\n        debug = JSON.parse(json.debug);\n      }\n\n      if (json.funcmap !== undefined) {\n        funcMap = JSON.parse(json.funcmap);\n      }\n    } catch (e) {\n      // tslint:disable-next-line:no-console\n      console.warn('Failed to parse debug and funcmap from compiler');\n    }\n\n    return {\n      avm: new Buffer(avm, 'hex'),\n      abi: new Buffer(abi),\n      hash,\n      debug,\n      funcMap\n    };\n  }\n}\n","export type CompilerType = 'CSharp' | 'Python';\n\nexport interface CompilerOutput {\n  avm: Buffer;\n  abi: Buffer;\n  hash: string;\n  debug?: Debug;\n  funcMap?: FuncMap;\n}\n\nexport interface Debug {\n  avm: {\n    name: string;\n    hash: string;\n  };\n\n  compiler: {\n    name: string;\n    version: string;\n  };\n\n  files: Array<{ id: string; url: string }>;\n\n  map: Array<{ start: number; end: number; file: number; method: string; line: number; file_line_no: number }>;\n  breakpoints: any[];\n}\n\nexport interface FuncMap {\n  Functions: Array<{ Method: string; VarMap: { [key: string]: number } }>;\n}\n\nexport class CompilerError extends Error {\n  code: number;\n\n  constructor(code: number, message: string) {\n    super(message);\n    this.code = code;\n  }\n}\n\nexport interface Compiler {\n  compile(code: Buffer): Promise<CompilerOutput>;\n}\n","import { Reader, Writer } from 'ontology-ts-crypto';\n\nexport interface DeployCodeOptions {\n  code: Buffer;\n  needStorage: boolean;\n  name: string;\n  version: string;\n  author: string;\n  email: string;\n  description: string;\n}\n\nexport class DeployCode {\n  code: Buffer;\n  needStorage: boolean;\n  name: string;\n  version: string;\n  author: string;\n  email: string;\n  description: string;\n\n  constructor(\n    options: DeployCodeOptions = {\n      code: new Buffer(''),\n      needStorage: false,\n      name: '',\n      version: '',\n      author: '',\n      email: '',\n      description: ''\n    }\n  ) {\n    this.code = options.code;\n    this.needStorage = options.needStorage;\n    this.name = options.name;\n    this.version = options.version;\n    this.author = options.author;\n    this.email = options.email;\n    this.description = options.description;\n  }\n\n  serialize(w: Writer) {\n    w.writeVarBytes(this.code);\n    w.writeUint8(this.needStorage ? 1 : 0);\n    w.writeString(this.name);\n    w.writeString(this.version);\n    w.writeString(this.author);\n    w.writeString(this.email);\n    w.writeString(this.description);\n  }\n\n  deserialize(r: Reader) {\n    this.code = r.readVarBytes();\n    this.needStorage = r.readByte() === 1 ? true : false;\n    this.name = r.readVarString();\n    this.version = r.readVarString();\n    this.author = r.readVarString();\n    this.email = r.readVarString();\n    this.description = r.readVarString();\n  }\n\n  toArray(): Buffer {\n    const bf = new Writer();\n    this.serialize(bf);\n    return new Buffer(bf.getBytes());\n  }\n\n  getCode() {\n    return this.code;\n  }\n}\n\nexport function isDeployCode(item: any): item is DeployCode {\n  return item instanceof DeployCode;\n}\n","import { Reader, Writer } from 'ontology-ts-crypto';\n\nexport class InvokeCode {\n  private code: Buffer;\n\n  constructor(code: Buffer = new Buffer('')) {\n    this.code = code;\n  }\n\n  serialize(w: Writer) {\n    try {\n      w.writeVarBytes(this.code);\n    } catch (e) {\n      throw new Error(`InvokeCode Code Serialize failed: ${e}`);\n    }\n  }\n\n  deserialize(r: Reader) {\n    try {\n      const code = r.readVarBytes();\n\n      this.code = code;\n    } catch (e) {\n      throw new Error(`InvokeCode Code Deserialize failed: ${e}`);\n    }\n  }\n}\n","import { createHash, randomBytes } from 'crypto';\nimport * as Long from 'long';\nimport { Address, Hash, Reader, Writer } from 'ontology-ts-crypto';\nimport { Uint256 } from '../common/uint256';\nimport { DeployCode } from './payload/deployCode';\nimport { InvokeCode } from './payload/invokeCode';\n\nexport const TX_MAX_SIG_SIZE = 16;\nexport type TransactionType = number;\n\nexport const Bookkeeper = 0x02;\nexport const Deploy = 0xd0;\nexport const Invoke = 0xd1;\n\n/**\n * Payload define the func for loading the payload data\n * base on payload type which have different struture\n */\nexport interface Payload {\n  /**\n   * Serialize payload data\n   */\n  serialize(w: Writer): void;\n\n  deserialize(r: Reader): void;\n}\n\nexport class RawSig {\n  static deserialize(r: Reader): RawSig {\n    const invoke = r.readVarBytes();\n    const verify = r.readVarBytes();\n\n    return new RawSig(invoke, verify);\n  }\n  private invoke: Buffer;\n  private verify: Buffer;\n\n  constructor(invoke: Buffer, verify: Buffer) {\n    this.invoke = invoke;\n    this.verify = verify;\n  }\n\n  getVerify() {\n    return this.verify;\n  }\n\n  serialize(w: Writer) {\n    w.writeVarBytes(this.invoke);\n    w.writeVarBytes(this.verify);\n  }\n}\n\nexport interface TransactionOptions {\n  version?: number;\n  txType?: TransactionType;\n  nonce?: number;\n  gasPrice?: Long;\n  gasLimit?: Long;\n  payer?: Address;\n  payload?: Payload;\n  sigs?: RawSig[];\n}\n\nexport class Transaction {\n  private version: number;\n  private txType: TransactionType;\n  private nonce: number;\n  private gasPrice: Long;\n  private gasLimit: Long;\n  private payer: Address;\n  private payload: Payload;\n\n  private sigs: RawSig[];\n\n  private raw: Buffer | undefined; // raw transaction data\n\n  private hash: Uint256;\n\n  constructor({\n    version = 0,\n    txType = Invoke,\n    nonce = Long.fromBytes([...randomBytes(4)], true, true).toNumber(),\n    gasPrice = Long.fromNumber(500),\n    gasLimit = Long.fromNumber(30000),\n    payer = new Address('0000000000000000000000000000000000000000'),\n    payload = new InvokeCode(),\n    sigs = []\n  }: TransactionOptions = {}) {\n    this.version = version;\n    this.txType = txType;\n    this.nonce = nonce;\n    this.gasPrice = gasPrice;\n    this.gasLimit = gasLimit;\n    this.payer = payer;\n    this.payload = payload;\n    this.sigs = sigs;\n\n    this.hash = Uint256.parseFromBytes(Hash.sha256(this.serializeUnsigned()));\n  }\n\n  getVersion() {\n    return this.version;\n  }\n\n  getNonce() {\n    return this.nonce;\n  }\n\n  getGasPrice(): Long {\n    return this.gasPrice;\n  }\n\n  getGasLimit(): Long {\n    return this.gasLimit;\n  }\n  getHash() {\n    return this.hash;\n  }\n\n  getTxType() {\n    return this.txType;\n  }\n\n  getPayer() {\n    return this.payer;\n  }\n\n  setPayer(payer: Address) {\n    this.payer = payer;\n  }\n\n  getPayload() {\n    return this.payload;\n  }\n\n  addSig(sig: RawSig) {\n    this.sigs.push(sig);\n  }\n\n  getSignatureAddresses(): Address[] {\n    const addrs: Address[] = [];\n\n    for (const sig of this.sigs) {\n      addrs.push(Address.fromVmCode(sig.getVerify()));\n    }\n\n    return addrs;\n  }\n\n  serialize(w: Writer) {\n    if (this.raw !== undefined) {\n      if (this.raw.length === 0) {\n        throw new Error('wrong constructed transaction');\n      }\n\n      w.writeBytes(this.raw);\n    } else {\n      w.writeBytes(this.serializeUnsigned());\n      w.writeBytes(this.serializeSigned());\n    }\n  }\n\n  deserialize(r: Reader) {\n    const pstart = r.position();\n    this.deserializeUnsigned(r);\n    const pos = r.position();\n    const lenUnsigned = pos - pstart;\n    r.seek(-lenUnsigned, 'relative');\n    const rawUnsigned = r.readBytes(lenUnsigned);\n\n    const sh = createHash('sha256');\n    sh.update(rawUnsigned);\n    this.hash = Uint256.parseFromBytes(sh.digest());\n\n    // tx sigs\n    const length = r.readVarUInt().toNumber();\n\n    if (length > TX_MAX_SIG_SIZE) {\n      throw new Error(`transaction signature number ${length} execced ${TX_MAX_SIG_SIZE}`);\n    }\n\n    for (let i = 0; i < length; i++) {\n      const sig = RawSig.deserialize(r);\n      this.sigs.push(sig);\n    }\n\n    const pend = r.position();\n    const lenAll = pend - pstart;\n    r.seek(-lenAll, 'relative');\n    this.raw = r.readBytes(lenAll);\n  }\n\n  toArray(): Buffer {\n    const bf = new Writer();\n    this.serialize(bf);\n    return new Buffer(bf.getBytes());\n  }\n\n  /**\n   * Serialize transaction data exclueds signatures\n   */\n  serializeUnsigned() {\n    const w = new Writer();\n    w.writeUint8(this.version);\n    w.writeUint8(this.txType);\n    w.writeUint32(this.nonce);\n    w.writeUint64(this.gasPrice);\n    w.writeUint64(this.gasLimit);\n    this.payer.serialize(w);\n    this.payload.serialize(w);\n    w.writeVarUint(0);\n\n    return w.getBytes();\n  }\n\n  private deserializeUnsigned(r: Reader) {\n    this.version = r.readByte();\n    this.txType = r.readByte();\n    this.nonce = r.readUInt32();\n    this.gasPrice = r.readUInt64();\n    this.gasLimit = r.readUInt64();\n    this.payer = Address.deserialize(r.readBytes(20));\n\n    if (this.txType === Invoke) {\n      const pl = new InvokeCode();\n      pl.deserialize(r);\n      this.payload = pl;\n    } else if (this.txType === Deploy) {\n      const pl = new DeployCode();\n      pl.deserialize(r);\n      this.payload = pl;\n    } else {\n      throw new Error(`unsupported tx type ${this.getTxType()}`);\n    }\n\n    const length = r.readVarUInt();\n\n    if (!length.isZero()) {\n      throw new Error('transaction attribute must be 0, got %d');\n    }\n  }\n\n  private serializeSigned() {\n    const w = new Writer();\n    w.writeVarUint(this.sigs.length);\n\n    // tslint:disable-next-line:prefer-for-of\n    for (let i = 0; i < this.sigs.length; i++) {\n      this.sigs[i].serialize(w);\n    }\n\n    return w.getBytes();\n  }\n}\n","import * as Long from 'long';\nimport { Address, Writer } from 'ontology-ts-crypto';\nimport { sleep } from './common/utils';\nimport { DeployCode } from './core/payload/deployCode';\nimport { Deploy, Transaction } from './core/transaction';\nimport { RpcClient } from './network/rpcClient';\n\nexport interface Deployment {\n  code: Buffer;\n  needStorage?: boolean;\n  name?: string;\n  version?: string;\n  author?: string;\n  email?: string;\n  description?: string;\n}\n\nexport interface DeployerOptions extends Deployment {\n  gasLimit?: string;\n  gasPrice?: string;\n\n  processCallback?: (transaction: Transaction) => Promise<void> | void;\n}\n\nexport class Deployer {\n  rpcAddress: string;\n\n  constructor(rpcAddress: string) {\n    this.rpcAddress = rpcAddress;\n  }\n\n  async isDeployed(address: Address) {\n    const client = new RpcClient(this.rpcAddress);\n\n    const response = await client.getContract(address.toArray().toString('hex'));\n    if (response.result === 'unknow contract' || response.result === 'unknow contracts') {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  async deploy({\n    code,\n    needStorage = false,\n    name = '',\n    version = '',\n    author = '',\n    email = '',\n    description = '',\n    gasPrice = '500',\n    gasLimit = '20000000',\n    processCallback\n  }: DeployerOptions) {\n    const payload = new DeployCode({\n      code,\n      needStorage,\n      name,\n      version,\n      author,\n      email,\n      description\n    });\n\n    const tx = new Transaction({\n      txType: Deploy,\n      payload,\n      gasPrice: Long.fromString(gasPrice),\n      gasLimit: Long.fromString(gasLimit)\n    });\n\n    if (processCallback !== undefined) {\n      const result = processCallback(tx);\n      if (result instanceof Promise) {\n        await result;\n      }\n    }\n\n    const client = new RpcClient(this.rpcAddress);\n\n    const w = new Writer();\n    tx.serialize(w);\n\n    const response = await client.sendRawTransaction(w.getBytes(), false);\n\n    if (response.error !== 0) {\n      throw new Error(`Failed to deploy contract: ${response.error} - ${response.result}`);\n    }\n\n    await sleep(3000);\n    return await client.getSmartCodeEvent(response.result);\n  }\n}\n","import { Address } from 'ontology-ts-crypto';\nimport { CompilerOutput, createCompiler } from './compiler';\nimport { Deployer } from './deployer';\nimport { Invoker } from './invoker';\nimport { Transactor } from './transactor';\nimport {\n  Client,\n  CompileOptions,\n  DeployOptions,\n  InitClientOptions,\n  InvokeOptions,\n  IsDeployedOptions,\n  TransferOptions\n} from './types';\nimport { signTransaction, signTransactionMulti } from './wallet';\n\nexport function initClient({ rpcAddress = 'http://polaris1.ont.io:20336' }: InitClientOptions): Client {\n  return {\n    rpcAddress\n  };\n}\n\nexport function compile({ code, type, url }: CompileOptions): Promise<CompilerOutput> {\n  const compiler = createCompiler({ type, url });\n  return compiler.compile(code);\n}\n\nexport function deploy({ client, account, password, ...rest }: DeployOptions) {\n  const deployer = new Deployer(client.rpcAddress);\n  return deployer.deploy({\n    ...rest,\n    processCallback: async (tx) => {\n      tx.setPayer(account.address);\n      await signTransaction(tx, account, password !== undefined ? password : '');\n    }\n  });\n}\n\nexport function isDeployed({ client, scriptHash }: IsDeployedOptions) {\n  const deployer = new Deployer(client.rpcAddress);\n  return deployer.isDeployed(new Address(scriptHash));\n}\n\nexport function invoke({ client, account, password, signers, ...rest }: InvokeOptions) {\n  const invoker = new Invoker(client.rpcAddress);\n  return invoker.invoke({\n    ...rest,\n    processCallback: async (tx) => {\n      if (account !== undefined) {\n        tx.setPayer(account.address);\n        await signTransaction(tx, account, password !== undefined ? password : '');\n      }\n\n      if (signers !== undefined) {\n        await signTransactionMulti(tx, signers.length, signers);\n      }\n    }\n  });\n}\n\nexport function transfer({ client, account, password, ...rest }: TransferOptions) {\n  const transactor = new Transactor(client.rpcAddress);\n  return transactor.transfer({\n    ...rest,\n    processCallback: async (tx) => {\n      if (account !== undefined) {\n        tx.setPayer(account.address);\n        await signTransaction(tx, account, password !== undefined ? password : '');\n      }\n    }\n  });\n}\n\nexport function withdrawOng({ client, account, password, ...rest }: TransferOptions) {\n  const transactor = new Transactor(client.rpcAddress);\n  return transactor.withdrawOng({\n    ...rest,\n    processCallback: async (tx) => {\n      if (account !== undefined) {\n        tx.setPayer(account.address);\n        await signTransaction(tx, account, password !== undefined ? password : '');\n      }\n    }\n  });\n}\n\nexport { CompilerType, CompilerOutput } from './compiler';\nexport { loadContract, loadCompiledContract } from './common/utils';\nexport { loadWallet, createWallet, createAccount } from './wallet';\nexport { hex2num, reverseBuffer } from './common/utils';\nexport { RpcClient } from './network/rpcClient';\nexport { buildInvokePayload } from './invoker';\nexport { InvokeCode } from './core/payload/invokeCode';\nexport { DeployCode } from './core/payload/deployCode';\nexport { Transaction } from './core/transaction';\nexport { Signer } from './types';\n","import * as Long from 'long';\nimport { OpCode, ProgramBuilder, Writer } from 'ontology-ts-crypto';\nimport { pushParam, reverseBuffer, sleep } from './common/utils';\nimport { InvokeCode } from './core/payload/invokeCode';\nimport { Invoke as InvokeEnum, Transaction } from './core/transaction';\nimport { RpcClient } from './network/rpcClient';\n\n// tslint:disable:no-console\n\nexport interface Invoke {\n  contract: string;\n  method: string;\n  parameters?: any[];\n}\n\nexport interface InvokerOptions extends Invoke {\n  gasLimit?: string;\n  gasPrice?: string;\n  preExec?: boolean;\n  wait?: boolean;\n  debug?: boolean;\n\n  processCallback?: (transaction: Transaction) => Promise<void> | void;\n}\n\nexport function buildInvokePayload(contract: string, method: string, parameters: any[]) {\n  const builder: ProgramBuilder = new ProgramBuilder();\n\n  parameters = [method, parameters];\n\n  parameters.reverse().forEach((parameter) => pushParam(parameter, builder));\n\n  builder.writeOpCode(OpCode.APPCALL);\n  builder.writeBytes(reverseBuffer(new Buffer(contract, 'hex')));\n\n  const code = builder.getProgram();\n  return code;\n}\n\nexport class Invoker {\n  rpcAddress: string;\n\n  constructor(rpcAddress: string) {\n    this.rpcAddress = rpcAddress;\n  }\n\n  async invoke({\n    method,\n    parameters = [],\n    contract,\n    gasPrice = '500',\n    gasLimit = '20000000',\n    preExec,\n    processCallback,\n    wait = true,\n    debug = false\n  }: InvokerOptions) {\n    if (debug) {\n      console.info(`Preparing smart contract call ${method}...`);\n    }\n\n    const payload = new InvokeCode(buildInvokePayload(contract, method, parameters));\n\n    if (debug) {\n      const payloadWriter = new Writer();\n      payload.serialize(payloadWriter);\n      console.log(`Payload is: ${payloadWriter.getBytes().toString('hex')}`);\n    }\n\n    const tx = new Transaction({\n      txType: InvokeEnum,\n      payload,\n      gasPrice: Long.fromString(gasPrice),\n      gasLimit: Long.fromString(gasLimit)\n    });\n\n    if (debug) {\n      const txWriter = new Writer();\n      tx.serialize(txWriter);\n      console.log(`Unsigned TX is: ${txWriter.getBytes().toString('hex')}`);\n    }\n\n    if (processCallback !== undefined) {\n      const result = processCallback(tx);\n      if (result instanceof Promise) {\n        await result;\n      }\n    }\n\n    const client = new RpcClient(this.rpcAddress);\n\n    const w = new Writer();\n    tx.serialize(w);\n\n    const response = await client.sendRawTransaction(w.getBytes(), preExec);\n\n    if (response.error !== 0) {\n      throw new Error('Failed to invoke contract: ' + response.result);\n    }\n\n    if (preExec || !wait) {\n      return response;\n    }\n\n    await sleep(3000);\n    return await client.getSmartCodeEvent(response.result);\n  }\n}\n","/*\n * Copyright (C) 2018 The ontology Authors\n * This file is part of The ontology library.\n *\n * The ontology is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The ontology is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The ontology.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport fetch from 'cross-fetch';\nimport { Address } from 'ontology-ts-crypto';\n\n/**\n * Wrapper class for RPC apis.\n */\nexport class RpcClient {\n  /**\n   * Url of the blockchain node\n   */\n  url: string;\n\n  constructor(url: string = 'http://polaris1.ont.io:20336') {\n    this.url = url;\n  }\n\n  /**\n   * Get the current blockchain node url.\n   */\n  getUrl() {\n    return this.url;\n  }\n\n  /**\n   * Make request base on method and parameters\n   * @param method Method's name\n   * @param params Parameters\n   */\n  makeRequest(method: string, ...params: any[]) {\n    const request = {\n      jsonrpc: '2.0',\n      method,\n      params,\n      id: 1\n    };\n\n    return request;\n  }\n\n  sendRequest(req: any) {\n    return fetch(this.url, {\n      method: 'POST',\n      body: JSON.stringify(req),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then((response) => response.json());\n  }\n\n  /**\n   * Get the balance of some address.\n   * The result contains ONT and ONG.\n   * @param address Address\n   */\n  getBalance(address: Address): Promise<any> {\n    const req = this.makeRequest('getbalance', address.toBase58());\n    return this.sendRequest(req);\n  }\n\n  /**\n   * Get the unbound ONG of some address.\n   * The result contains ONG.\n   * @param address Address\n   */\n  getUnboundOng(address: Address): Promise<any> {\n    const req = this.makeRequest('getunboundong', address.toBase58());\n    return this.sendRequest(req);\n  }\n\n  /**\n   * Send ran transaction to blockchain.\n   * @param data Hex encoded data.\n   * @param preExec Decides if it is a pre-execute transaction.\n   */\n  sendRawTransaction(data: string | Buffer, preExec: boolean = false): Promise<any> {\n    let req;\n\n    if (data instanceof Buffer) {\n      data = data.toString('hex');\n    }\n\n    if (preExec) {\n      req = this.makeRequest('sendrawtransaction', data, 1);\n    } else {\n      req = this.makeRequest('sendrawtransaction', data);\n    }\n\n    return this.sendRequest(req);\n  }\n\n  /**\n   * Get raw transaction by transaction hash.\n   * The result is hex encoded string.\n   * @param txHash Reversed transaction hash\n   */\n  getRawTransaction(txHash: string): Promise<any> {\n    const req = this.makeRequest('getrawtransaction', txHash);\n    return this.sendRequest(req);\n  }\n\n  /**\n   * Get transaction info by transaction hash.\n   * The result is json.\n   * @param txHash Reversed transaction hash.\n   */\n  getRawTransactionJson(txHash: string): Promise<any> {\n    const req = this.makeRequest('getrawtransaction', txHash, 1);\n    return this.sendRequest(req);\n  }\n\n  /**\n   * Get the nodes count.\n   */\n  getNodeCount(): Promise<any> {\n    const req = this.makeRequest('getconnectioncount');\n    return this.sendRequest(req);\n  }\n\n  /**\n   * Get the current block height.\n   */\n  getBlockHeight(): Promise<any> {\n    const req = this.makeRequest('getblockcount');\n    return this.sendRequest(req);\n  }\n\n  /**\n   * Get the all blocks count.\n   */\n  getBlockCount(): Promise<any> {\n    const req = this.makeRequest('getblockcount');\n    return this.sendRequest(req);\n  }\n\n  /**\n   * Get block info by block's height or hash.\n   * The result is json.\n   * @param value Block's hash or height\n   */\n  getBlockJson(value: string | number): Promise<any> {\n    const req = this.makeRequest('getblock', value, 1);\n    return this.sendRequest(req);\n  }\n\n  /**\n   * Get contract info by contract' code hash.\n   * The result is hex encoded string.\n   * @param hash Contract's code hash.\n   */\n  getContract(hash: string): Promise<any> {\n    const req = this.makeRequest('getcontractstate', hash);\n    return this.sendRequest(req);\n  }\n\n  /**\n   * Get contract info by contract's code hash.\n   * The result is json.\n   * @param codeHash Contract's code hash.\n   */\n  getContractJson(codeHash: string): Promise<any> {\n    const req = this.makeRequest('getcontractstate', codeHash, 1);\n    return this.sendRequest(req);\n  }\n\n  /**\n   * Get block info by block's height or hash.\n   * The result is hex encoded string.\n   *\n   * @param value Block's height or hash\n   */\n  getBlock(value: string | number): Promise<any> {\n    const req = this.makeRequest('getblock', value);\n    return this.sendRequest(req);\n  }\n\n  /**\n   * Get smart contract event.\n   * If parameter is transaction's hash, the result is the event of that transaction.\n   * If parameter is block's height, the result is all the events of that block.\n   *\n   * @param value Transaction's hash or block's height\n   */\n  getSmartCodeEvent(value: string | number): Promise<any> {\n    const req = this.makeRequest('getsmartcodeevent', value);\n    return this.sendRequest(req);\n  }\n\n  /**\n   * Get block height by transaction hash\n   * @param txHash Reversed transaction hash\n   */\n  getBlockHeightByTxHash(txHash: string): Promise<any> {\n    const req = this.makeRequest('getblockheightbytxhash', txHash);\n    return this.sendRequest(req);\n  }\n\n  /**\n   * Get stored value in smart contract by contract's code hash and the key.\n   * @param codeHash Contract's code hash\n   * @param key Key of stored value\n   */\n  getStorage(codeHash: string, key: string): Promise<any> {\n    const req = this.makeRequest('getstorage', codeHash, key);\n    return this.sendRequest(req);\n  }\n\n  /**\n   * Get merkle proof by transaction hash.\n   * @param hash Reversed transaction hash\n   */\n  getMerkleProof(hash: string): Promise<any> {\n    const req = this.makeRequest('getmerkleproof', hash);\n    return this.sendRequest(req);\n  }\n\n  /**\n   * Get allowanece\n   * @param asset Asset's type. Only ONT and ONG supported.\n   * @param from Address of allowance's sender.\n   * @param to Address of allowance's receiver.\n   */\n  getAllowance(asset: string, from: Address, to: Address): Promise<any> {\n    const req = this.makeRequest('getallowance', asset, from.toBase58(), to.toBase58());\n    return this.sendRequest(req);\n  }\n}\n","import BigNumber from 'bignumber.js';\nimport * as Long from 'long';\nimport { Address, OpCode, ProgramBuilder, Writer } from 'ontology-ts-crypto';\nimport { Struct } from './common/struct';\nimport { pushParam, sleep } from './common/utils';\nimport { InvokeCode } from './core/payload/invokeCode';\nimport { Invoke, Transaction } from './core/transaction';\nimport { RpcClient } from './network/rpcClient';\n\nexport interface Transfer {\n  sender: Address;\n  to: Address;\n  amount: string;\n  asset: string;\n}\n\nexport interface TransactorTransferOptions extends Transfer {\n  gasLimit?: string;\n  gasPrice?: string;\n\n  wait?: boolean;\n\n  processCallback?: (transaction: Transaction) => Promise<void> | void;\n}\n\nexport class Transactor {\n  rpcAddress: string;\n\n  constructor(rpcAddress: string) {\n    this.rpcAddress = rpcAddress;\n  }\n\n  async transfer({\n    sender,\n    to,\n    amount,\n    asset,\n    gasPrice = '500',\n    gasLimit = '20000000',\n    processCallback,\n    wait = true\n  }: TransactorTransferOptions) {\n    let amountBg = new BigNumber(amount);\n    if (asset === 'ong') {\n      amountBg = amountBg.shiftedBy(9);\n    }\n\n    const builder: ProgramBuilder = new ProgramBuilder();\n\n    const tran = new Struct([sender, to, Long.fromString(amountBg.toString())].reverse());\n    const parameters = [0, new Address(this.getContract(asset)), 'transfer', [tran]];\n\n    parameters.reverse().forEach((parameter) => pushParam(parameter, builder));\n    builder.writeOpCode(OpCode.SYSCALL);\n    builder.pushBytes(new Buffer('Ontology.Native.Invoke'));\n\n    const code = builder.getProgram();\n    const payload = new InvokeCode(code);\n\n    const tx = new Transaction({\n      txType: Invoke,\n      payload,\n      gasPrice: Long.fromString(gasPrice),\n      gasLimit: Long.fromString(gasLimit)\n    });\n\n    if (processCallback !== undefined) {\n      const result = processCallback(tx);\n      if (result instanceof Promise) {\n        await result;\n      }\n    }\n\n    const client = new RpcClient(this.rpcAddress);\n    const w = new Writer();\n    tx.serialize(w);\n\n    const response = await client.sendRawTransaction(w.getBytes(), false);\n\n    if (response.error !== 0) {\n      throw new Error(`Failed to make the transfer: ${response.error} - ${response.result}`);\n    }\n\n    if (!wait) {\n      return response;\n    }\n\n    await sleep(3000);\n    return await client.getSmartCodeEvent(response.result);\n  }\n\n  async withdrawOng({\n    sender,\n    to,\n    amount,\n    gasPrice = '500',\n    gasLimit = '20000000',\n    processCallback,\n    wait = true\n  }: TransactorTransferOptions) {\n    const amountBg = new BigNumber(amount).shiftedBy(9);\n\n    const builder: ProgramBuilder = new ProgramBuilder();\n\n    const tran = new Struct(\n      [sender, new Address(this.getContract('ont')), to, Long.fromString(amountBg.toString())].reverse()\n    );\n    const parameters = [0, new Address(this.getContract('ong')), 'transferFrom', tran];\n\n    parameters.reverse().forEach((parameter) => pushParam(parameter, builder));\n    builder.writeOpCode(OpCode.SYSCALL);\n    builder.pushBytes(new Buffer('Ontology.Native.Invoke'));\n\n    const code = builder.getProgram();\n    const payload = new InvokeCode(code);\n\n    const tx = new Transaction({\n      txType: Invoke,\n      payload,\n      gasPrice: Long.fromString(gasPrice),\n      gasLimit: Long.fromString(gasLimit)\n    });\n\n    if (processCallback !== undefined) {\n      const result = processCallback(tx);\n      if (result instanceof Promise) {\n        await result;\n      }\n    }\n\n    const client = new RpcClient(this.rpcAddress);\n    const w = new Writer();\n    tx.serialize(w);\n\n    const response = await client.sendRawTransaction(w.getBytes(), false);\n\n    if (response.error !== 0) {\n      throw new Error(`Failed to make the withdraw Ong: ${response.error} - ${response.result}`);\n    }\n\n    if (!wait) {\n      return response;\n    }\n\n    await sleep(3000);\n    return await client.getSmartCodeEvent(response.result);\n  }\n\n  private getContract(asset: string) {\n    if (asset === 'ont') {\n      return '0000000000000000000000000000000000000001';\n    } else if (asset === 'ong') {\n      return '0000000000000000000000000000000000000002';\n    } else {\n      throw new Error(`Invalid asset: ${asset}.`);\n    }\n  }\n}\n","import { randomBytes } from 'crypto';\nimport * as fs from 'fs';\nimport {\n  Account,\n  Hash,\n  PrivateKey,\n  programFromMultiPubKeys,\n  programFromParams,\n  programFromPubKey,\n  PublicKey,\n  Wallet\n} from 'ontology-ts-crypto';\nimport { RawSig, Transaction } from './core/transaction';\nimport { Signer } from './types';\n\nexport function loadWallet(walletPath: string): Wallet {\n  const f = fs.readFileSync(walletPath, 'utf8');\n  return Wallet.deserializeJson(f);\n}\n\nexport function createWallet(accounts: Account[]): Wallet {\n  const wallet = Wallet.create();\n\n  accounts.forEach((account) => wallet.addAccount(account));\n  return wallet;\n}\n\nexport function createAccount(privateKey: string): Account {\n  return Account.create(randomBytes(4).toString('hex'), PrivateKey.deserialize(new Buffer(privateKey, 'hex')), '');\n}\n\nexport async function signTransaction(tx: Transaction, account: Account, password: string) {\n  const bytes = tx.serializeUnsigned();\n  const hash = Hash.sha256(Hash.sha256(bytes));\n\n  const privateKey = await account.decryptKey(password);\n  const publicKey = privateKey.getPublicKey();\n  const signature = await privateKey.sign(hash);\n\n  const invokationSript = programFromParams([signature.serialize()]);\n  const verificationScript = programFromPubKey(publicKey);\n\n  const sig = new RawSig(invokationSript, verificationScript);\n  tx.addSig(sig);\n}\n\nexport async function signTransactionMulti(tx: Transaction, m: number, signers: Signer[]) {\n  const bytes = tx.serializeUnsigned();\n  const hash = Hash.sha256(Hash.sha256(bytes));\n  const signatures: Buffer[] = [];\n  const publicKeys: PublicKey[] = [];\n\n  for (const signer of signers) {\n    const privateKey = await signer.account.decryptKey(signer.password);\n    const publicKey = privateKey.getPublicKey();\n    const signature = await privateKey.sign(hash);\n\n    publicKeys.push(publicKey);\n    signatures.push(signature.serialize());\n  }\n\n  const invokationSript = programFromParams(signatures);\n  const verificationScript = programFromMultiPubKeys(m, publicKeys);\n\n  const sig = new RawSig(invokationSript, verificationScript);\n  tx.addSig(sig);\n}\n","module.exports = require(\"bignumber.js\");","module.exports = require(\"cross-fetch\");","module.exports = require(\"crypto\");","module.exports = require(\"fs\");","module.exports = require(\"long\");","module.exports = require(\"ontology-ts-crypto\");"],"sourceRoot":""}